package controller;import entity.User;import moc.oreh.eventbus.EventBus;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.annotation.Transactional;import org.springframework.transaction.support.TransactionSynchronizationManager;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import service.TakePlane;import service.events.EmailService;import service.jdbc.DaoService;import service.myeventbus.HelloEvent;import service.myeventbus.OnlineEvent;import java.util.concurrent.CountDownLatch;import java.util.concurrent.TimeUnit;/** * Created by hero on 17-4-2. */@Controllerpublic class MyController {    private Logger logger = LogManager.getLogger(MyController.class);    @Autowired    private TakePlane takePlane;    @Autowired    private EmailService emailService;    @Autowired    private EventBus eventBus;    @Autowired    private DaoService daoService;    @ResponseBody    @RequestMapping("/hello")    public String welcome() {        return "{hh:你好, world哥}";    }    @RequestMapping("/check")    public User receive() {        takePlane.check();        User user = new User("小明", 12);        return user;    }    @RequestMapping("/send")    @Transactional(timeout = 1)    public void send() {        try {            TimeUnit.SECONDS.sleep(2);        } catch (InterruptedException e) {            e.printStackTrace();        }        emailService.sendEmail("abc@123.com", "其实,你是个好人");        emailService.sendEmail("abc@123.com", "啊啊啊啊啊");        emailService.sendEmail("fjelwk@834.com", "hello world");        eventBus.publish(new HelloEvent());    }    @Transactional(timeout = 3)    @RequestMapping("/online")    public User online() {        OnlineEvent onlineEvent = new OnlineEvent(new User("小红", 17));        eventBus.publish(onlineEvent);//        try {//            int i = 3;//            i /= 0;//        } catch (Exception e) {//            throw new RuntimeException();//        }        return new User("小红", 3);/*        Thread[] threads = new Thread[10];        for (int i = 0; i < 10; i++) {            threads[i] = new Thread(new Runnable() {                public void run() {                    OnlineEvent onlineEvent = new OnlineEvent(new User("小红", 17));                    eventBus.publish(onlineEvent, this);                }            });        }        for (Thread thread : threads) {            thread.start();        }*/    }    @RequestMapping("/saveUser")    public User saveUser(String name, int age) {        daoService.saveUser(new User(name, age));        return new User(name, age);    }    @RequestMapping("/getUser")    @Transactional(timeout = 1)    public User getUser(String userId) {        logger.info("get in getUser");        return daoService.getUser(userId);    }}